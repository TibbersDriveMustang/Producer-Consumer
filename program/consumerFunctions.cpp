//
//  consumerFunctions.cpp
//  program
//
//  Created by Hongyi Guo on 9/28/15.
//  Copyright Â© 2015 Hongyi Guo. All rights reserved.
//

#include <stdio.h>
#include <iostream>
#include "consumerFunctions.h"
#include "dataStructures.h"

using namespace std;

extern queue<itemProduced> *itemBuffer;
extern sem_t semBuffer;

bool isPrime(int num){
    return true;
}

void* Create_ConsumerThreads(void* num){
    long int threadNum = (long int) num + 1000000 + 1;
    printf("Consumer(ID:%ld) created\n",threadNum);
    
    FILE *pFile;
    itemProduced tempItem;
    while(1){
            sem_wait(&semBuffer);
        if(!itemBuffer->empty()){
            tempItem = itemBuffer->front();
            itemBuffer->pop();
            printf("Consumer(%ld) consumed Item(%d) generated by producer(%d)\n",threadNum, tempItem.createdNumber,tempItem.producerID);
            sem_post(&semBuffer);
            if(isPrime(tempItem.createdNumber)){
                pFile = fopen("../../../Prime-numbers", "a+");
                if (pFile == NULL) {
                    perror("Error opening file");
                }
                fprintf(pFile, "Producer ID: %d,Consumer ID: %ld,Item Number: %d;\n",tempItem.producerID,threadNum,tempItem.createdNumber);
                fclose(pFile);
            }
            else{
                printf("Input to NonPrimeDoc\n");
                sem_post(&semBuffer);
            }
            sem_post(&semBuffer);
        }
    }
    
    return NULL;
}

void* ConsumerCreation(void* numConsumer){
    long int num = (long int) numConsumer;
    pthread_t consumerThreads[num];
    for (int i = 0; i < num; i++) {
        pthread_create(&consumerThreads[i], NULL, Create_ConsumerThreads, (void*) i);
        sleep(0.5);
    }
    while(1);
    return NULL;
}